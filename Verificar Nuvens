#pequena rotina para identificar nuvens em imagens aéreas

# Form implementation generated from reading ui file 'analisa_nuvem.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QFileDialog
from PyQt6.QtGui import QColor, QPalette, QRegularExpressionValidator
from PyQt6.QtCore import QThread, Qt
from PyQt6.QtCore import QThread, pyqtSignal, pyqtSlot, QRegularExpression
import cv2
import numpy as np
import os
import pandas as pd

class Thread_1(QThread):
    # Sinais para comunicação entre as threads
    finished = pyqtSignal(int)
    result_ready = pyqtSignal(list,int)
    progress_changed = pyqtSignal(int,int)
    etapa_changed = pyqtSignal(int)

    def __init__(self, tifs):
        super().__init__()
        self.arquivos_tifs = tifs

    def run(self):
        # Lógica da thread
        result = self.analisa_nuvens()
        # Emitir o sinal com o resultado
        if result:
           self.result_ready.emit(result,1)
    
    def analisa_nuvens(self):
        imagem_percents = []
        tam = len(self.arquivos_tifs)
        for p, tif in enumerate(self.arquivos_tifs):
            # Carregue a imagem
            imagem = cv2.imread(tif)
            
            # Converta a imagem BGR para HSI
            imagem_hsi = cv2.cvtColor(imagem, cv2.COLOR_BGR2HSV_FULL)
            
            # Separe os canais H, S e I
            H, S, I = cv2.split(imagem_hsi)
            B, G, R = cv2.split(imagem)
            
            # Percorra cada pixel da imagem
            altura, largura = imagem.shape[:2]
            total_pixels = altura * largura
            
            imagem_binaria = np.zeros_like(I)
            
            
            for i in range(altura):
                for j in range(largura):
                    intensidade = I[i, j]
                    saturacao = S[i, j]
                    verde = G[i,j]
                    verm = R[i,j]
                    azul = B[i,j]
            
                    # Calcule a diferença entre I e S
                    diff_i_s = intensidade - saturacao
            
                    # Verifique se é sombra ou nuvem com base na diferença
                    if diff_i_s >= 120 and verde > 150 and verm > 150 and azul > 150:
                        imagem_binaria[i, j] = 255  # Defina o pixel como nuvem (1)

            imagem_nuvem = cv2.medianBlur(imagem_binaria,7)

            contador_num = np.count_nonzero(imagem_nuvem == 255)
            
            # Use np.count_nonzero para contar o valor
            porcentagem_nuvem = (contador_num/total_pixels) * 100
        
            info = [os.path.basename(tif),porcentagem_nuvem]
            imagem_percents.append(info)
            self.progress_changed.emit(int(p*100/tam),1)
            
            
            # Calcule a porcentagem de sombra e nuvem em relação ao total de pixels
            #porcentagem_sombra = (count_sombra / total_pixels) * 100
            #porcentagem_nuvem = (count_nuvem / total_pixels) * 100
        return imagem_percents

class Thread_2(QThread):
    # Sinais para comunicação entre as threads
    finished = pyqtSignal(int)
    result_ready = pyqtSignal(list,int)
    progress_changed = pyqtSignal(int,int)
    etapa_changed = pyqtSignal(int)

    def __init__(self, tifs):
        super().__init__()
        self.arquivos_tifs = tifs

    def run(self):
        # Lógica da thread
        result = self.analisa_nuvens()
        # Emitir o sinal com o resultado
        if result:
           self.result_ready.emit(result,2)
    
    def analisa_nuvens(self):
        imagem_percents = []
        tam = len(self.arquivos_tifs)
        for p, tif in enumerate(self.arquivos_tifs):
            # Carregue a imagem
            imagem = cv2.imread(tif)
            
            # Converta a imagem BGR para HSI
            imagem_hsi = cv2.cvtColor(imagem, cv2.COLOR_BGR2HSV_FULL)
            
            # Separe os canais H, S e I
            H, S, I = cv2.split(imagem_hsi)
            B, G, R = cv2.split(imagem)
            
            # Percorra cada pixel da imagem
            altura, largura = imagem.shape[:2]
            total_pixels = altura * largura
            
            imagem_binaria = np.zeros_like(I)
            
            
            for i in range(altura):
                for j in range(largura):
                    intensidade = I[i, j]
                    saturacao = S[i, j]
                    verde = G[i,j]
                    verm = R[i,j]
                    azul = B[i,j]
            
                    # Calcule a diferença entre I e S
                    diff_i_s = intensidade - saturacao
            
                    # Verifique se é sombra ou nuvem com base na diferença
                    if diff_i_s >= 120 and verde > 150 and verm > 150 and azul > 150:
                        imagem_binaria[i, j] = 255  # Defina o pixel como nuvem (1)

            imagem_nuvem = cv2.medianBlur(imagem_binaria,7)

            contador_num = np.count_nonzero(imagem_nuvem == 255)
            
            # Use np.count_nonzero para contar o valor
            porcentagem_nuvem = (contador_num/total_pixels) * 100
        
            info = [os.path.basename(tif),porcentagem_nuvem]
            imagem_percents.append(info)
            self.progress_changed.emit(int(p*100/tam),2)
            
            
            # Calcule a porcentagem de sombra e nuvem em relação ao total de pixels
            #porcentagem_sombra = (count_sombra / total_pixels) * 100
            #porcentagem_nuvem = (count_nuvem / total_pixels) * 100
        return imagem_percents
    
class Thread_3(QThread):
    # Sinais para comunicação entre as threads
    finished = pyqtSignal(int)
    result_ready = pyqtSignal(list,int)
    progress_changed = pyqtSignal(int,int)
    etapa_changed = pyqtSignal(int)

    def __init__(self, tifs):
        super().__init__()
        self.arquivos_tifs = tifs

    def run(self):
        # Lógica da thread
        result = self.analisa_nuvens()
        # Emitir o sinal com o resultado
        if result:
           self.result_ready.emit(result,3)
    
    def analisa_nuvens(self):
        imagem_percents = []
        tam = len(self.arquivos_tifs)
        for p, tif in enumerate(self.arquivos_tifs):
            # Carregue a imagem
            imagem = cv2.imread(tif)
            
            # Converta a imagem BGR para HSI
            imagem_hsi = cv2.cvtColor(imagem, cv2.COLOR_BGR2HSV_FULL)
            
            # Separe os canais H, S e I
            H, S, I = cv2.split(imagem_hsi)
            B, G, R = cv2.split(imagem)
            
            # Percorra cada pixel da imagem
            altura, largura = imagem.shape[:2]
            total_pixels = altura * largura
            
            imagem_binaria = np.zeros_like(I)
            
            
            for i in range(altura):
                for j in range(largura):
                    intensidade = I[i, j]
                    saturacao = S[i, j]
                    verde = G[i,j]
                    verm = R[i,j]
                    azul = B[i,j]
            
                    # Calcule a diferença entre I e S
                    diff_i_s = intensidade - saturacao
            
                    # Verifique se é sombra ou nuvem com base na diferença
                    if diff_i_s >= 120 and verde > 150 and verm > 150 and azul > 150:
                        imagem_binaria[i, j] = 255  # Defina o pixel como nuvem (1)

            imagem_nuvem = cv2.medianBlur(imagem_binaria,7)

            contador_num = np.count_nonzero(imagem_nuvem == 255)
            
            # Use np.count_nonzero para contar o valor
            porcentagem_nuvem = (contador_num/total_pixels) * 100
        
            info = [os.path.basename(tif),porcentagem_nuvem]
            imagem_percents.append(info)
            self.progress_changed.emit(int(p*100/tam),3)
            
            
            # Calcule a porcentagem de sombra e nuvem em relação ao total de pixels
            #porcentagem_sombra = (count_sombra / total_pixels) * 100
            #porcentagem_nuvem = (count_nuvem / total_pixels) * 100
        return imagem_percents

class Thread_4(QThread):
    # Sinais para comunicação entre as threads
    finished = pyqtSignal(int)
    result_ready = pyqtSignal(list,int)
    progress_changed = pyqtSignal(int,int)
    etapa_changed = pyqtSignal(int)

    def __init__(self, tifs):
        super().__init__()
        self.arquivos_tifs = tifs

    def run(self):
        # Lógica da thread
        result = self.analisa_nuvens()
        # Emitir o sinal com o resultado
        if result:
           self.result_ready.emit(result,4)
    
    def analisa_nuvens(self):
        imagem_percents = []
        tam = len(self.arquivos_tifs)
        for p, tif in enumerate(self.arquivos_tifs):
            # Carregue a imagem
            imagem = cv2.imread(tif)
            
            # Converta a imagem BGR para HSI
            imagem_hsi = cv2.cvtColor(imagem, cv2.COLOR_BGR2HSV_FULL)
            
            # Separe os canais H, S e I
            H, S, I = cv2.split(imagem_hsi)
            B, G, R = cv2.split(imagem)
            
            # Percorra cada pixel da imagem
            altura, largura = imagem.shape[:2]
            total_pixels = altura * largura
            
            imagem_binaria = np.zeros_like(I)
            
            
            for i in range(altura):
                for j in range(largura):
                    intensidade = I[i, j]
                    saturacao = S[i, j]
                    verde = G[i,j]
                    verm = R[i,j]
                    azul = B[i,j]
            
                    # Calcule a diferença entre I e S
                    diff_i_s = intensidade - saturacao
            
                    # Verifique se é sombra ou nuvem com base na diferença
                    if diff_i_s >= 120 and verde > 150 and verm > 150 and azul > 150:
                        imagem_binaria[i, j] = 255  # Defina o pixel como nuvem (1)

            imagem_nuvem = cv2.medianBlur(imagem_binaria,7)

            contador_num = np.count_nonzero(imagem_nuvem == 255)
            
            # Use np.count_nonzero para contar o valor
            porcentagem_nuvem = (contador_num/total_pixels) * 100
        
            info = [os.path.basename(tif),porcentagem_nuvem]
            imagem_percents.append(info)
            self.progress_changed.emit(int(p*100/tam),4)
            
            
            # Calcule a porcentagem de sombra e nuvem em relação ao total de pixels
            #porcentagem_sombra = (count_sombra / total_pixels) * 100
            #porcentagem_nuvem = (count_nuvem / total_pixels) * 100
        return imagem_percents
    
class Thread_5(QThread):
    # Sinais para comunicação entre as threads
    finished = pyqtSignal(int)
    result_ready = pyqtSignal(list,int)
    progress_changed = pyqtSignal(int,int)
    etapa_changed = pyqtSignal(int)

    def __init__(self, lista, diretorio):
        super().__init__()
        self.lista = lista
        self.diretorio = diretorio

    def run(self):
        # Lógica da thread
        result = self.cria_csv()
        # Emitir o sinal com o resultado
    def cria_csv(self):
             #self.Infos.setText('Aguarde, estamos criando o relatório\n')
             dados_gerais = [['Porcentagem < 10% chance baixa de nuvem'],
                             ['Porcentagem > 10% e < 30% chance media de nuvem'],
                             ['Porcentagem > 30% chance alta de nuvem'],
                             [''],
                             [''],
                             [''],
                             [''],
                             ['Foto','Chance de Nuvem (%)']]
             
             lista_ordenada = sorted(self.lista, key=lambda x: x[1], reverse=True)
             for info in lista_ordenada:
                   dados_gerais.append([info[0],"{:.3f}".format(info[1]).replace('.', ',')])
             csv = pd.DataFrame(dados_gerais)
             csv.to_csv(self.diretorio+'/relatorio_nuvens'+'.csv',sep=';',index=False,header=False,encoding='UTF-8',decimal=',',float_format='%.3f')
             #self.Infos.setText('O relatório foi gerado\n')

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(728, 346)
        Form.setMinimumSize(QtCore.QSize(728, 346))
        Form.setMaximumSize(QtCore.QSize(728, 346))
        Form.setStyleSheet("")
        self.progressBar = QtWidgets.QProgressBar(parent=Form)
        self.progressBar.setGeometry(QtCore.QRect(100, 300, 541, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.pushButton = QtWidgets.QPushButton(parent=Form)
        self.pushButton.setGeometry(QtCore.QRect(270, 250, 171, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.onSelectTIFS)
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setGeometry(QtCore.QRect(240, 30, 241, 191))
        self.diretorio_atual = "D:/Rhuan/Fotoindices/Nalisa Nuvens"
        self.widget.setStyleSheet("image: url(:NewPrefix/Aerologo_transp.png);")
        self.widget.setObjectName("widget")

        self.counter_thread = 0
        self.progress_1 = 0
        self.progress_2 = 0
        self.progress_3 = 0
        self.progress_4 = 0

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "Selecione as Imagens"))

    def on_finished_threads(self, result, id):
        if id == 1:
            self.resultados_1 = result
        if id == 2:
            self.resultados_2 = result
        if id == 3:
            self.resultados_3 = result
        if id == 4:
            self.resultados_4 = result
        self.counter_thread += 1

        if self.counter_thread == 4:
            self.resultados = self.resultados_1 + self.resultados_2 + self.resultados_3 + self.resultados_4
            self.thread_5 = Thread_5(self.resultados, self.pasta)
            self.thread_5.start()
            self.counter_thread = 0

            self.progressBar.setValue(100)


    def onSelectTIFS(self):
        self.tifs, _ = QFileDialog.getOpenFileNames(Dialog, "Selecionar Imagens", "", "*.tif;*.IIQ")
         # Exibir o nome do arquivo selecionado na primeira entrada de texto
        if self.tifs:
            tif_terco = len(self.tifs) // 4
            tifs_1 = self.tifs[:tif_terco]
            tifs_2 = self.tifs[tif_terco:2*tif_terco]
            tifs_3 = self.tifs[2*tif_terco:3*tif_terco]
            tifs_4 = self.tifs[3*tif_terco:]

            self.thread_1 = Thread_1(tifs_1)
            self.thread_2 = Thread_2(tifs_2)
            self.thread_3 = Thread_3(tifs_3)
            self.thread_4 = Thread_4(tifs_4)

            self.thread_1.result_ready.connect(self.on_finished_threads)
            self.thread_2.result_ready.connect(self.on_finished_threads)
            self.thread_3.result_ready.connect(self.on_finished_threads)
            self.thread_4.result_ready.connect(self.on_finished_threads)
            
            self.thread_1.progress_changed.connect(self.on_thread_progress_changed)
            self.thread_2.progress_changed.connect(self.on_thread_progress_changed)
            self.thread_3.progress_changed.connect(self.on_thread_progress_changed)
            self.thread_4.progress_changed.connect(self.on_thread_progress_changed)

            self.pasta, _= os.path.split(self.tifs[0])
            
            self.thread_1.start()
            self.thread_2.start()
            self.thread_3.start()
            self.thread_4.start()

    def on_thread_progress_changed(self, value, id):
            # Slot chamado quando o progresso da thread é atualizado
            if id == 1:
                self.progress_1 = value
            elif id == 2:
                self.progress_2 = value
            elif id == 3:
                self.progress_3 = value
            elif id == 4:
                self.progress_4 = value

            if self.thread_1.isRunning() and self.thread_2.isRunning() and self.thread_3.isRunning() and self.thread_4.isRunning():
                pgr = (self.progress_1+self.progress_2+self.progress_3+self.progress_4)/4
                self.progressBar.setValue(int(pgr))
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    #app_icon = QtGui.QIcon()
    #app_icon.addFile(diretorio_atual + '/resources/aerologo_fotoindice.ico', QtCore.QSize(48,48))
    #app.setWindowIcon(app_icon)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Form()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
